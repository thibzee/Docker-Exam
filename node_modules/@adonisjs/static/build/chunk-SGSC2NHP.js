// src/static_middleware.ts
import staticServer from "serve-static";
var StaticMiddleware = class {
  #sendFile;
  constructor(publicPath, config) {
    this.#sendFile = staticServer(publicPath, {
      ...config,
      fallthrough: true,
      setHeaders: (res, path, stats) => {
        const headers = res.parent.getHeaders();
        Object.keys(headers).forEach((key) => {
          const value = headers[key];
          if (value) {
            res.setHeader(key, value);
          }
        });
        if (typeof config.headers === "function") {
          const customHeaders = config.headers(path, stats);
          Object.keys(customHeaders).forEach((key) => {
            res.setHeader(key, customHeaders[key]);
          });
        }
      }
    });
  }
  /**
   * Handle the request to serve static files.
   */
  async handle({ request, response }, next) {
    const serveStaticResponse = response.response;
    serveStaticResponse["parent"] = response;
    return new Promise((resolve, reject) => {
      function done(error) {
        response.response.removeListener("finish", done);
        if (error) {
          reject(error);
        } else {
          resolve();
        }
      }
      response.response.addListener("finish", done);
      this.#sendFile(request.request, serveStaticResponse, async () => {
        try {
          await next();
          done();
        } catch (error) {
          done(error);
        }
      });
    });
  }
};

export {
  StaticMiddleware
};
//# sourceMappingURL=chunk-SGSC2NHP.js.map