{"version":3,"sources":["../src/static_middleware.ts"],"sourcesContent":["/*\n * @adonisjs/static\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { ServerResponse } from 'node:http'\nimport staticServer, { type RequestHandler } from 'serve-static'\n\nimport type { AssetsConfig } from './types.js'\nimport type { NextFn } from '@adonisjs/core/types/http'\nimport type { HttpContext, Response } from '@adonisjs/core/http'\n\n/**\n * Middleware to serve static assets from a pre-defined directory\n */\nexport default class StaticMiddleware {\n  #sendFile: RequestHandler<ServerResponse & { parent?: Response }>\n\n  constructor(publicPath: string, config: AssetsConfig) {\n    this.#sendFile = staticServer(publicPath, {\n      ...config,\n      fallthrough: true,\n      setHeaders: (res, path, stats) => {\n        const headers = res.parent!.getHeaders()\n        Object.keys(headers).forEach((key) => {\n          const value = headers[key]\n          if (value) {\n            res.setHeader(key, value)\n          }\n        })\n\n        /**\n         * Set user defined custom headers\n         */\n        if (typeof config.headers === 'function') {\n          const customHeaders = config.headers(path, stats)\n          Object.keys(customHeaders).forEach((key) => {\n            res.setHeader(key, customHeaders[key])\n          })\n        }\n      },\n    })\n  }\n\n  /**\n   * Handle the request to serve static files.\n   */\n  async handle({ request, response }: HttpContext, next: NextFn) {\n    const serveStaticResponse: ServerResponse & { parent?: Response } = response.response\n    serveStaticResponse['parent'] = response\n\n    /**\n     * We need to await the middleware until the file has been served, otherwise\n     * AdonisJS HTTP server will call `response.finish` before the file stream\n     * is written to the response socket.\n     */\n    return new Promise<void>((resolve, reject) => {\n      function done(error?: any) {\n        response.response.removeListener('finish', done)\n        if (error) {\n          reject(error)\n        } else {\n          resolve()\n        }\n      }\n\n      response.response.addListener('finish', done)\n      this.#sendFile(request.request, serveStaticResponse, async () => {\n        try {\n          await next()\n          done()\n        } catch (error) {\n          done(error)\n        }\n      })\n    })\n  }\n}\n"],"mappings":";AAUA,OAAO,kBAA2C;AASlD,IAAqB,mBAArB,MAAsC;AAAA,EACpC;AAAA,EAEA,YAAY,YAAoB,QAAsB;AACpD,SAAK,YAAY,aAAa,YAAY;AAAA,MACxC,GAAG;AAAA,MACH,aAAa;AAAA,MACb,YAAY,CAAC,KAAK,MAAM,UAAU;AAChC,cAAM,UAAU,IAAI,OAAQ,WAAW;AACvC,eAAO,KAAK,OAAO,EAAE,QAAQ,CAAC,QAAQ;AACpC,gBAAM,QAAQ,QAAQ,GAAG;AACzB,cAAI,OAAO;AACT,gBAAI,UAAU,KAAK,KAAK;AAAA,UAC1B;AAAA,QACF,CAAC;AAKD,YAAI,OAAO,OAAO,YAAY,YAAY;AACxC,gBAAM,gBAAgB,OAAO,QAAQ,MAAM,KAAK;AAChD,iBAAO,KAAK,aAAa,EAAE,QAAQ,CAAC,QAAQ;AAC1C,gBAAI,UAAU,KAAK,cAAc,GAAG,CAAC;AAAA,UACvC,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,EAAE,SAAS,SAAS,GAAgB,MAAc;AAC7D,UAAM,sBAA8D,SAAS;AAC7E,wBAAoB,QAAQ,IAAI;AAOhC,WAAO,IAAI,QAAc,CAAC,SAAS,WAAW;AAC5C,eAAS,KAAK,OAAa;AACzB,iBAAS,SAAS,eAAe,UAAU,IAAI;AAC/C,YAAI,OAAO;AACT,iBAAO,KAAK;AAAA,QACd,OAAO;AACL,kBAAQ;AAAA,QACV;AAAA,MACF;AAEA,eAAS,SAAS,YAAY,UAAU,IAAI;AAC5C,WAAK,UAAU,QAAQ,SAAS,qBAAqB,YAAY;AAC/D,YAAI;AACF,gBAAM,KAAK;AACX,eAAK;AAAA,QACP,SAAS,OAAO;AACd,eAAK,KAAK;AAAA,QACZ;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;","names":[]}