/*
 * @adonisjs/vite
 *
 * (c) AdonisJS
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
import debug from '../src/backend/debug.js';
import { Vite } from '../src/backend/vite.js';
import { defineConfig } from '../src/backend/define_config.js';
export default class ViteServiceProvider {
    app;
    constructor(app) {
        this.app = app;
    }
    /**
     * Registers edge plugin when edge is installed
     */
    async registerEdgePlugin() {
        if (this.app.usingEdgeJS) {
            const edge = await import('edge.js');
            const vite = await this.app.container.make('vite');
            const { edgePluginVite } = await import('../src/backend/plugins/edge.js');
            edge.default.use(edgePluginVite(vite));
        }
    }
    /**
     * Registers CSP keywords when @adonisjs/shield is installed
     */
    async registerShieldKeywords() {
        let cspKeywords = null;
        try {
            const shieldExports = await import('@adonisjs/shield');
            cspKeywords = shieldExports.cspKeywords;
        }
        catch { }
        if (cspKeywords) {
            debug('Detected @adonisjs/shield package. Adding Vite keywords for CSP policy');
            const vite = await this.app.container.make('vite');
            /**
             * Registering the @viteUrl keyword for CSP directives.
             * Returns http URL to the dev or the CDN server, otherwise
             * an empty string
             */
            cspKeywords.register('@viteUrl', function () {
                const assetsURL = vite.assetsUrl();
                if (!assetsURL || !assetsURL.startsWith('http://') || assetsURL.startsWith('https://')) {
                    return '';
                }
                return assetsURL;
            });
            /**
             * Registering the @viteDevUrl keyword for the CSP directives.
             * Returns the dev server URL in development and empty string
             * in prod
             */
            cspKeywords.register('@viteDevUrl', function () {
                return vite.devUrl();
            });
            /**
             * Registering the @viteHmrUrl keyword for the CSP directives.
             * Returns the Websocket URL for the HMR server
             */
            cspKeywords.register('@viteHmrUrl', function () {
                return vite.devUrl().replace('http://', 'ws://').replace('https://', 'wss://');
            });
        }
    }
    register() {
        this.app.container.singleton('vite', async () => {
            const config = this.app.config.get('vite', defineConfig({}));
            return new Vite(config);
        });
    }
    async boot() {
        await this.registerEdgePlugin();
        await this.registerShieldKeywords();
    }
}
