{"version":3,"sources":["../src/guards/hsts.ts","../src/noop.ts","../src/guards/csrf.ts","../src/debug.ts","../src/guards/csp/main.ts","../src/guards/no_sniff.ts","../src/guards/frame_guard.ts"],"sourcesContent":["/*\n * @adonisjs/shield\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport string from '@adonisjs/core/helpers/string'\nimport type { HttpContext } from '@adonisjs/core/http'\n\nimport { noop } from '../noop.js'\nimport type { HstsOptions } from '../types.js'\n\nconst DEFAULT_MAX_AGE = 180 * 24 * 60 * 60\n\n/**\n * Normalizes the max age to seconds\n */\nfunction normalizeMaxAge(maxAge?: string | number): number {\n  if (maxAge === null || maxAge === undefined) {\n    return DEFAULT_MAX_AGE\n  }\n\n  const maxAgeInSeconds = string.seconds.parse(maxAge)\n  if (maxAgeInSeconds < 0) {\n    throw new Error('Max age for \"shield.hsts\" cannot be a negative value')\n  }\n\n  return maxAgeInSeconds\n}\n\n/**\n * Factory function that returns a new function to Add `Strict-Transport-Security`\n * header based upon given user options.\n */\nexport function hstsFactory(options: HstsOptions) {\n  if (!options.enabled) {\n    return noop\n  }\n\n  const maxAge = normalizeMaxAge(options.maxAge)\n\n  let value = `max-age=${maxAge}`\n  if (options.includeSubDomains) {\n    value += '; includeSubDomains'\n  }\n\n  if (options.preload) {\n    value += '; preload'\n  }\n\n  return function hsts({ response }: HttpContext) {\n    response.header('Strict-Transport-Security', value)\n  }\n}\n","/*\n * @adonisjs/shield\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { HttpContext } from '@adonisjs/core/http'\nexport function noop(_: HttpContext) {}\n","/*\n * @adonisjs/shield\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/// <reference types=\"@adonisjs/session/session_middleware\" />\n/// <reference path=\"../shield_middleware.ts\" />\n\nimport Tokens from 'csrf'\nimport type { Edge } from 'edge.js'\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type { Encryption } from '@adonisjs/core/encryption'\n\nimport debug from '../debug.js'\nimport { noop } from '../noop.js'\nimport type { CsrfOptions } from '../types.js'\nimport { E_BAD_CSRF_TOKEN } from '../errors.js'\n\n/**\n * A class to encapsulate the logic of verifying and generating\n * CSRF tokens.\n */\nexport class CsrfGuard {\n  /**\n   * Factory for generate csrf secrets and tokens\n   */\n  #tokens = new Tokens()\n\n  /**\n   * An array of methods on which the CSRF validation should be enforced.\n   */\n  #allowedMethods: NonNullable<CsrfOptions['methods']>\n\n  /**\n   * An array of routes to be ignored from CSRF validation\n   */\n  #routesToIgnore: NonNullable<CsrfOptions['exceptRoutes']>\n\n  /**\n   * Name of the csrf secret key stored inside the session store.\n   * The secret key is used to validate the tokens\n   */\n  #secretSessionKey = 'csrf-secret'\n\n  /**\n   * Csrf options\n   */\n  #options: CsrfOptions\n\n  /**\n   * Reference to the encryption module\n   */\n  #encryption: Encryption\n\n  /**\n   * Reference to the view provider\n   */\n  #edge?: Edge\n\n  constructor(options: CsrfOptions, encryption: Encryption, edge?: Edge) {\n    this.#options = options\n    this.#encryption = encryption\n    this.#edge = edge\n\n    this.#routesToIgnore = this.#options.exceptRoutes || []\n    this.#allowedMethods = (this.#options.methods || []).map((method) => method.toLowerCase())\n  }\n\n  /**\n   * Find if a request should be validated or not\n   */\n  #shouldValidateRequest(ctx: HttpContext) {\n    /**\n     * Do not validate when allowed methods are defined and current\n     * method is not part of the allowedlist\n     */\n    if (\n      this.#allowedMethods.length &&\n      !this.#allowedMethods.includes(ctx.request.method().toLowerCase())\n    ) {\n      debug('csrf: ignoring request for \"%s\" method', ctx.request.method())\n      return false\n    }\n\n    /**\n     * If routesToIgnore is defined as a function\n     */\n    if (typeof this.#routesToIgnore === 'function') {\n      return !this.#routesToIgnore(ctx)\n    }\n\n    /**\n     * Do not validate when current request route is ignored inside `routesToIgnore`\n     * array\n     */\n    if (this.#routesToIgnore.includes(ctx.route!.pattern)) {\n      debug('csrf: ignoring route \"%s\"', ctx.route!.pattern)\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * Read csrf token from one of the following sources.\n   *\n   * - `_csrf` input\n   * - `x-csrf-token` header\n   * - Or `x-xsrf-token` header. The header value must be set by\n   *   reading the `XSRF-TOKEN` cookie.\n   */\n  #getCsrfTokenFromRequest({ request }: HttpContext): string | null {\n    if (request.input('_csrf')) {\n      debug('retrieved token from \"_csrf\" input')\n      return request.input('_csrf')\n    }\n\n    if (request.header('x-csrf-token')) {\n      debug('retrieved token from \"x-csrf-token\" header')\n      return request.header('x-csrf-token')!\n    }\n\n    /**\n     * Only entertain header based on cookie value, when `enableXsrfCookie`\n     * is enabled\n     */\n    if (!this.#options.enableXsrfCookie) {\n      return null\n    }\n\n    const encryptedToken = request.header('x-xsrf-token')\n    if (typeof encryptedToken !== 'string' || !encryptedToken) {\n      return null\n    }\n\n    debug('retrieved token from \"x-xsrf-token\" header')\n    return this.#encryption.decrypt(decodeURIComponent(encryptedToken).slice(2), 'XSRF-TOKEN')\n  }\n\n  /**\n   * Share csrf helper methods with the view engine.\n   */\n  #shareCsrfViewLocals(ctx: HttpContext): void {\n    if (!ctx.view || !this.#edge) {\n      return\n    }\n\n    ctx.view.share({\n      csrfToken: ctx.request.csrfToken,\n      csrfMeta: () => {\n        return this.#edge!.globals.html.safe(\n          `<meta name='csrf-token' content='${ctx.request.csrfToken}'>`\n        )\n      },\n      csrfField: () => {\n        return this.#edge!.globals.html.safe(\n          `<input type='hidden' name='_csrf' value='${ctx.request.csrfToken}'>`\n        )\n      },\n    })\n  }\n\n  /**\n   * Generate a new csrf token using the csrf secret extracted from session.\n   */\n  #generateCsrfToken(csrfSecret: string): string {\n    return this.#tokens.create(csrfSecret)\n  }\n\n  /**\n   * Return the existing CSRF secret from the session or create a\n   * new one. Newly created secret is persisted to session at\n   * the same time\n   */\n  async #getCsrfSecret(ctx: HttpContext): Promise<string> {\n    let csrfSecret = ctx.session.get(this.#secretSessionKey)\n\n    if (!csrfSecret) {\n      debug('generating new CSRF secret')\n      csrfSecret = await this.#tokens.secret()\n      ctx.session.put(this.#secretSessionKey, csrfSecret)\n    }\n\n    return csrfSecret\n  }\n\n  /**\n   * Handle csrf verification. First, get the secret,\n   * next, check if the request method should be\n   * verified. Next, attach the newly generated\n   * csrf token to the request object.\n   */\n  async handle(ctx: HttpContext): Promise<void> {\n    const csrfSecret = await this.#getCsrfSecret(ctx)\n\n    /**\n     * Validate current request before moving forward\n     */\n    if (this.#shouldValidateRequest(ctx)) {\n      const csrfToken = this.#getCsrfTokenFromRequest(ctx)\n      if (!csrfToken || !this.#tokens.verify(csrfSecret, csrfToken)) {\n        throw new E_BAD_CSRF_TOKEN()\n      }\n    }\n\n    /**\n     * Add csrf token on the request\n     */\n    ctx.request.csrfToken = this.#generateCsrfToken(csrfSecret)\n\n    /**\n     * Set it as a cookie\n     */\n    if (this.#options.enableXsrfCookie) {\n      ctx.response.encryptedCookie('XSRF-TOKEN', ctx.request.csrfToken, {\n        ...this.#options.cookieOptions,\n        httpOnly: false,\n      })\n    }\n\n    /**\n     * Share with the view engine\n     */\n    this.#shareCsrfViewLocals(ctx)\n  }\n}\n\n/**\n * A factory function that returns a new function to enforce CSRF\n * protection\n */\nexport function csrfFactory(options: CsrfOptions, encryption: Encryption, edge?: Edge) {\n  if (!options.enabled) {\n    return noop\n  }\n\n  const csrfGuard = new CsrfGuard(options, encryption, edge)\n  return csrfGuard.handle.bind(csrfGuard)\n}\n","/*\n * @adonisjs/shield\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { debuglog } from 'node:util'\nexport default debuglog('adonisjs:shield')\n","/*\n * @adonisjs/shield\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/// <reference types=\"@adonisjs/core/providers/edge_provider\" />\n/// <reference path=\"../../shield_middleware.ts\" />\n\nimport helmetCsp from 'helmet-csp'\nimport string from '@adonisjs/core/helpers/string'\nimport { type HttpContext } from '@adonisjs/core/http'\n\nimport { noop } from '../../noop.js'\nimport { cspKeywords } from './keywords.js'\nimport type { CspOptions } from '../../types.js'\n\n/**\n * Registering nonce keyword\n */\ncspKeywords.register('@nonce', function (_, response) {\n  return `'nonce-${response.nonce}'`\n})\n\n/**\n * Factory that returns a function to set the `Content-Security-Policy` header based upon\n * the user config\n */\nexport function cspFactory(options: CspOptions) {\n  if (!options.enabled) {\n    return noop\n  }\n\n  if (options.directives) {\n    /**\n     * Transform directives to replace keywords\n     */\n    Object.keys(options.directives).forEach((directive) => {\n      options.directives![directive] = cspKeywords.resolve(options.directives![directive])\n    })\n  }\n\n  /**\n   * The types of \"helmetCsp\" package are messed up\n   */\n  const helmetCspMiddleware = (helmetCsp as unknown as typeof helmetCsp.default)(options)\n\n  return function csp(ctx: HttpContext) {\n    return new Promise<void>((resolve, reject) => {\n      /**\n       * Generating nonce\n       */\n      ctx.response.nonce = string.generateRandom(16)\n\n      /**\n       * Helmet csp needs the `nonce` property on the HTTP ServerResponse\n       */\n      ctx.response.response.nonce = ctx.response.nonce\n\n      /**\n       * Optionally share nonce with templates\n       */\n      if ('view' in ctx) {\n        ctx.view.share({ cspNonce: ctx.response.nonce })\n      }\n\n      /**\n       * Give request to helmet\n       */\n      helmetCspMiddleware(ctx.response.request, ctx.response.response, (error) => {\n        if (error) {\n          reject(error)\n        } else {\n          resolve()\n        }\n      })\n    })\n  }\n}\n","/*\n * @adonisjs/shield\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type { ContentTypeSniffingOptions } from '../types.js'\nimport { noop } from '../noop.js'\n\n/**\n * Factory function that returns a function to Add `X-Content-Type-Options`\n * header based upon given user options.\n */\nexport function noSniffFactory(options: ContentTypeSniffingOptions) {\n  if (!options.enabled) {\n    return noop\n  }\n\n  return function noSniff({ response }: HttpContext) {\n    response.header('X-Content-Type-Options', 'nosniff')\n  }\n}\n","/*\n * @adonisjs/shield\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { HttpContext } from '@adonisjs/core/http'\n\nimport { noop } from '../noop.js'\nimport { XFrameOptions } from '../types.js'\n\nconst ALLOWED_ACTIONS = ['DENY', 'ALLOW-FROM', 'SAMEORIGIN']\n\n/**\n * Factory function that returns a function to set `X-Frame-Options` header\n * based upon given user options.\n */\nexport function frameGuardFactory(options: XFrameOptions) {\n  if (!options.enabled) {\n    return noop\n  }\n\n  const action = options.action || ('SAMEORIGIN' as const)\n  const resolvedOptions = { ...options, action } as Required<XFrameOptions>\n\n  if (!ALLOWED_ACTIONS.includes(resolvedOptions.action)) {\n    throw new Error('frameGuard: Action must be one of \"DENY\", \"ALLOW-FROM\" or \"SAMEORGIGIN\"')\n  }\n\n  if (resolvedOptions.action === 'ALLOW-FROM' && !resolvedOptions['domain']) {\n    throw new Error('frameGuard: Domain value is required when using action as \"ALLOW-FROM\"')\n  }\n\n  const result =\n    resolvedOptions.action === 'ALLOW-FROM' ? `${action} ${resolvedOptions['domain']}` : action\n\n  return function frameGuard({ response }: HttpContext) {\n    response.header('X-Frame-Options', result)\n  }\n}\n"],"mappings":"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","names":["string","string"]}