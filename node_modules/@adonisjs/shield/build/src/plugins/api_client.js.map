{"version":3,"sources":["../../../src/plugins/api_client.ts"],"sourcesContent":["/*\n * @adonisjs/shield\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/// <reference types=\"@adonisjs/session/plugins/api_client\" />\n\nimport Tokens from 'csrf'\nimport { PluginFn } from '@japa/runner/types'\nimport { ApiClient, ApiRequest } from '@japa/api-client'\n\nconst CSRF_ENABLED = Symbol.for('CSRF_ENABLED')\n\ndeclare module '@japa/api-client' {\n  export interface ApiRequest {\n    [CSRF_ENABLED]: boolean\n    withCsrfToken(): this\n  }\n}\n\n/**\n * Configures the API client plugin to support CSRF\n * tokens\n */\nexport const shieldApiClient = () => {\n  const pluginFn: PluginFn = function () {\n    ApiRequest.macro('withCsrfToken', function (this: ApiRequest) {\n      this[CSRF_ENABLED] = true\n      return this\n    })\n\n    ApiClient.setup(async (request) => {\n      const isCSRFEnabled = request[CSRF_ENABLED]\n      if (!isCSRFEnabled) {\n        return\n      }\n\n      const tokens = new Tokens()\n      const secret = await tokens.secret()\n      const token = tokens.create(secret)\n\n      request.withSession({ 'csrf-secret': secret })\n      request.header('x-csrf-token', token)\n    })\n  }\n\n  return pluginFn\n}\n"],"mappings":";;;AAWA,OAAO,YAAY;AAEnB,SAAS,WAAW,kBAAkB;AAEtC,IAAM,eAAe,OAAO,IAAI,cAAc;AAavC,IAAM,kBAAkB,MAAM;AACnC,QAAM,WAAqB,WAAY;AACrC,eAAW,MAAM,iBAAiB,WAA4B;AAC5D,WAAK,YAAY,IAAI;AACrB,aAAO;AAAA,IACT,CAAC;AAED,cAAU,MAAM,OAAO,YAAY;AACjC,YAAM,gBAAgB,QAAQ,YAAY;AAC1C,UAAI,CAAC,eAAe;AAClB;AAAA,MACF;AAEA,YAAM,SAAS,IAAI,OAAO;AAC1B,YAAM,SAAS,MAAM,OAAO,OAAO;AACnC,YAAM,QAAQ,OAAO,OAAO,MAAM;AAElC,cAAQ,YAAY,EAAE,eAAe,OAAO,CAAC;AAC7C,cAAQ,OAAO,gBAAgB,KAAK;AAAA,IACtC,CAAC;AAAA,EACH;AAEA,SAAO;AACT;","names":[]}