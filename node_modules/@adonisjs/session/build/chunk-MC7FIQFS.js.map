{"version":3,"sources":["../stubs/main.ts","../configure.ts","../src/define_config.ts","../src/stores/memory.ts"],"sourcesContent":["/*\n * @adonisjs/session\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { getDirname } from '@poppinss/utils'\n\nexport const stubsRoot = getDirname(import.meta.url)\n","/*\n * @adonisjs/session\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type Configure from '@adonisjs/core/commands/configure'\nimport { stubsRoot } from './stubs/main.js'\n\n/**\n * Configures the package\n */\nexport async function configure(command: Configure) {\n  const codemods = await command.createCodemods()\n\n  /**\n   * Publish config file\n   */\n  await codemods.makeUsingStub(stubsRoot, 'config/session.stub', {})\n\n  /**\n   * Define environment variables\n   */\n  await codemods.defineEnvVariables({ SESSION_DRIVER: 'cookie' })\n\n  /**\n   * Define environment variables validations\n   */\n  await codemods.defineEnvValidations({\n    variables: {\n      SESSION_DRIVER: `Env.schema.enum(['cookie', 'memory'] as const)`,\n    },\n    leadingComment: 'Variables for configuring session package',\n  })\n\n  /**\n   * Register middleware\n   */\n  await codemods.registerMiddleware('router', [\n    {\n      path: '@adonisjs/session/session_middleware',\n    },\n  ])\n\n  /**\n   * Register provider\n   */\n  await codemods.updateRcFile((rcFile) => {\n    rcFile.addProvider('@adonisjs/session/session_provider')\n  })\n}\n","/*\n * @adonisjs/session\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n/// <reference types=\"@adonisjs/redis/redis_provider\" />\n\nimport string from '@poppinss/utils/string'\nimport { configProvider } from '@adonisjs/core'\nimport type { ConfigProvider } from '@adonisjs/core/types'\nimport { InvalidArgumentsException } from '@poppinss/utils'\nimport type { CookieOptions } from '@adonisjs/core/types/http'\n\nimport debug from './debug.js'\nimport { MemoryStore } from './stores/memory.js'\nimport type {\n  SessionConfig,\n  FileStoreConfig,\n  RedisStoreConfig,\n  SessionStoreFactory,\n} from './types.js'\n\n/**\n * Resolved config with stores\n */\ntype ResolvedConfig<KnownStores extends Record<string, SessionStoreFactory>> = SessionConfig & {\n  store: keyof KnownStores\n  stores: KnownStores\n  cookie: Partial<CookieOptions>\n}\n\n/**\n * Helper to normalize session config\n */\nexport function defineConfig<\n  KnownStores extends Record<string, SessionStoreFactory | ConfigProvider<SessionStoreFactory>>,\n>(\n  config: Partial<SessionConfig> & {\n    store: keyof KnownStores | 'memory'\n    stores: KnownStores\n  }\n): ConfigProvider<\n  ResolvedConfig<{\n    [K in keyof KnownStores]: SessionStoreFactory\n  }>\n> {\n  debug('processing session config %O', config)\n\n  /**\n   * Make sure a store is defined\n   */\n  if (!config.store) {\n    throw new InvalidArgumentsException('Missing \"store\" property inside the session config')\n  }\n\n  /**\n   * Destructuring config with the default values. We pull out\n   * stores and cookie values, since we have to transform\n   * them in the output value.\n   */\n  const { stores, cookie, ...rest } = {\n    enabled: true,\n    age: '2h',\n    cookieName: 'adonis_session',\n    clearWithBrowser: false,\n    ...config,\n  }\n\n  const cookieOptions: Partial<CookieOptions> = { ...cookie }\n\n  /**\n   * Define maxAge property when session id cookie is\n   * not a session cookie.\n   */\n  if (!rest.clearWithBrowser) {\n    cookieOptions.maxAge = string.seconds.parse(rest.age)\n    debug('computing maxAge \"%s\" for session id cookie', cookieOptions.maxAge)\n  }\n\n  return configProvider.create(async (app) => {\n    const storesNames = Object.keys(config.stores)\n\n    /**\n     * List of stores with memory store always configured\n     */\n    const storesList = {\n      memory: () => new MemoryStore(),\n    } as Record<string, SessionStoreFactory>\n\n    /**\n     * Looping for stores and resolving them\n     */\n    for (let storeName of storesNames) {\n      const store = config.stores[storeName]\n      if (typeof store === 'function') {\n        storesList[storeName] = store\n      } else {\n        storesList[storeName] = await store.resolver(app)\n      }\n    }\n\n    const transformedConfig = {\n      ...rest,\n      cookie: cookieOptions,\n      stores: storesList as { [K in keyof KnownStores]: SessionStoreFactory },\n    }\n\n    debug('transformed session config %O', transformedConfig)\n    return transformedConfig\n  })\n}\n\n/**\n * Inbuilt stores to store the session data.\n */\nexport const stores: {\n  file: (config: FileStoreConfig) => ConfigProvider<SessionStoreFactory>\n  redis: (config: RedisStoreConfig) => ConfigProvider<SessionStoreFactory>\n  cookie: () => ConfigProvider<SessionStoreFactory>\n} = {\n  file: (config) => {\n    return configProvider.create(async () => {\n      const { FileStore } = await import('./stores/file.js')\n      return (_, sessionConfig: SessionConfig) => {\n        return new FileStore(config, sessionConfig.age)\n      }\n    })\n  },\n  redis: (config) => {\n    return configProvider.create(async (app) => {\n      const { RedisStore } = await import('./stores/redis.js')\n      const redis = await app.container.make('redis')\n\n      return (_, sessionConfig: SessionConfig) => {\n        return new RedisStore(redis.connection(config.connection), sessionConfig.age)\n      }\n    })\n  },\n  cookie: () => {\n    return configProvider.create(async () => {\n      const { CookieStore } = await import('./stores/cookie.js')\n      return (ctx, sessionConfig: SessionConfig) => {\n        return new CookieStore(sessionConfig.cookie, ctx)\n      }\n    })\n  },\n}\n","/**\n * @adonisjs/session\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { SessionData, SessionStoreContract } from '../types.js'\n\n/**\n * Memory store is meant to be used for writing tests.\n */\nexport class MemoryStore implements SessionStoreContract {\n  static sessions: Map<string, SessionData> = new Map()\n\n  /**\n   * Read session id value from the memory\n   */\n  read(sessionId: string): SessionData | null {\n    return MemoryStore.sessions.get(sessionId) || null\n  }\n\n  /**\n   * Save in memory value for a given session id\n   */\n  write(sessionId: string, values: SessionData): void {\n    MemoryStore.sessions.set(sessionId, values)\n  }\n\n  /**\n   * Cleanup for a single session\n   */\n  destroy(sessionId: string): void {\n    MemoryStore.sessions.delete(sessionId)\n  }\n\n  touch(): void {}\n}\n"],"mappings":"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","names":["stores"]}