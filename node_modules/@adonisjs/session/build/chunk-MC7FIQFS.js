import {
  debug_default
} from "./chunk-WBAYBMJJ.js";

// stubs/main.ts
import { getDirname } from "@poppinss/utils";
var stubsRoot = getDirname(import.meta.url);

// configure.ts
async function configure(command) {
  const codemods = await command.createCodemods();
  await codemods.makeUsingStub(stubsRoot, "config/session.stub", {});
  await codemods.defineEnvVariables({ SESSION_DRIVER: "cookie" });
  await codemods.defineEnvValidations({
    variables: {
      SESSION_DRIVER: `Env.schema.enum(['cookie', 'memory'] as const)`
    },
    leadingComment: "Variables for configuring session package"
  });
  await codemods.registerMiddleware("router", [
    {
      path: "@adonisjs/session/session_middleware"
    }
  ]);
  await codemods.updateRcFile((rcFile) => {
    rcFile.addProvider("@adonisjs/session/session_provider");
  });
}

// src/define_config.ts
import string from "@poppinss/utils/string";
import { configProvider } from "@adonisjs/core";
import { InvalidArgumentsException } from "@poppinss/utils";

// src/stores/memory.ts
var MemoryStore = class _MemoryStore {
  static sessions = /* @__PURE__ */ new Map();
  /**
   * Read session id value from the memory
   */
  read(sessionId) {
    return _MemoryStore.sessions.get(sessionId) || null;
  }
  /**
   * Save in memory value for a given session id
   */
  write(sessionId, values) {
    _MemoryStore.sessions.set(sessionId, values);
  }
  /**
   * Cleanup for a single session
   */
  destroy(sessionId) {
    _MemoryStore.sessions.delete(sessionId);
  }
  touch() {
  }
};

// src/define_config.ts
function defineConfig(config) {
  debug_default("processing session config %O", config);
  if (!config.store) {
    throw new InvalidArgumentsException('Missing "store" property inside the session config');
  }
  const { stores: stores2, cookie, ...rest } = {
    enabled: true,
    age: "2h",
    cookieName: "adonis_session",
    clearWithBrowser: false,
    ...config
  };
  const cookieOptions = { ...cookie };
  if (!rest.clearWithBrowser) {
    cookieOptions.maxAge = string.seconds.parse(rest.age);
    debug_default('computing maxAge "%s" for session id cookie', cookieOptions.maxAge);
  }
  return configProvider.create(async (app) => {
    const storesNames = Object.keys(config.stores);
    const storesList = {
      memory: () => new MemoryStore()
    };
    for (let storeName of storesNames) {
      const store = config.stores[storeName];
      if (typeof store === "function") {
        storesList[storeName] = store;
      } else {
        storesList[storeName] = await store.resolver(app);
      }
    }
    const transformedConfig = {
      ...rest,
      cookie: cookieOptions,
      stores: storesList
    };
    debug_default("transformed session config %O", transformedConfig);
    return transformedConfig;
  });
}
var stores = {
  file: (config) => {
    return configProvider.create(async () => {
      const { FileStore } = await import("./file-YO7C2QWO.js");
      return (_, sessionConfig) => {
        return new FileStore(config, sessionConfig.age);
      };
    });
  },
  redis: (config) => {
    return configProvider.create(async (app) => {
      const { RedisStore } = await import("./redis-KDWIBKUQ.js");
      const redis = await app.container.make("redis");
      return (_, sessionConfig) => {
        return new RedisStore(redis.connection(config.connection), sessionConfig.age);
      };
    });
  },
  cookie: () => {
    return configProvider.create(async () => {
      const { CookieStore } = await import("./cookie-H7KRZB4T.js");
      return (ctx, sessionConfig) => {
        return new CookieStore(sessionConfig.cookie, ctx);
      };
    });
  }
};

export {
  stubsRoot,
  configure,
  defineConfig,
  stores
};
//# sourceMappingURL=chunk-MC7FIQFS.js.map