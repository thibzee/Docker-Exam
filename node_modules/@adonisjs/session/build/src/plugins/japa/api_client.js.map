{"version":3,"sources":["../../../../src/plugins/japa/api_client.ts"],"sourcesContent":["/*\n * @adonisjs/session\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport lodash from '@poppinss/utils/lodash'\nimport { configProvider } from '@adonisjs/core'\nimport { RuntimeException } from '@poppinss/utils'\nimport type { PluginFn } from '@japa/runner/types'\nimport type { ApplicationService } from '@adonisjs/core/types'\nimport { ApiClient, ApiRequest, ApiResponse } from '@japa/api-client'\n\nimport { SessionClient } from '../../client.js'\nimport type { SessionData } from '../../types.js'\n\ndeclare module '@japa/api-client' {\n  export interface ApiRequest {\n    sessionClient: SessionClient\n\n    /**\n     * Make HTTP request along with the provided session data\n     */\n    withSession(values: SessionData): this\n\n    /**\n     * Make HTTP request along with the provided session flash\n     * messages.\n     */\n    withFlashMessages(values: SessionData): this\n  }\n\n  export interface ApiResponse {\n    sessionBag: {\n      values: SessionData\n      flashMessages: SessionData\n    }\n\n    /**\n     * Get session data from the HTTP response\n     */\n    session(key?: string): any\n\n    /**\n     * Get flash messages from the HTTP response\n     */\n    flashMessages(): SessionData\n\n    /**\n     * Get flash messages for a specific key from the HTTP response\n     */\n    flashMessage(key: string): SessionData\n\n    /**\n     * Assert session key-value pair exists\n     */\n    assertSession(key: string, value?: any): void\n\n    /**\n     * Assert key is missing in session store\n     */\n    assertSessionMissing(key: string): void\n\n    /**\n     * Assert flash message key-value pair exists\n     */\n    assertFlashMessage(key: string, value?: any): void\n\n    /**\n     * Assert key is missing flash messages store\n     */\n    assertFlashMissing(key: string): void\n\n    /**\n     * Assert flash messages has validation errors for\n     * the given field\n     */\n    assertHasValidationError(field: string): void\n\n    /**\n     * Assert flash messages does not have validation errors\n     * for the given field\n     */\n    assertDoesNotHaveValidationError(field: string): void\n\n    /**\n     * Assert error message for a given field\n     */\n    assertValidationError(field: string, message: string): void\n\n    /**\n     * Assert all error messages for a given field\n     */\n    assertValidationErrors(field: string, messages: string[]): void\n  }\n}\n\n/**\n * Hooks AdonisJS Session with the Japa API client\n * plugin\n */\nexport const sessionApiClient = (app: ApplicationService) => {\n  const pluginFn: PluginFn = async function () {\n    const sessionConfigProvider = app.config.get('session', {})\n\n    /**\n     * Resolve config from the provider\n     */\n    const config = await configProvider.resolve<any>(app, sessionConfigProvider)\n    if (!config) {\n      throw new RuntimeException(\n        'Invalid \"config/session.ts\" file. Make sure you are using the \"defineConfig\" method'\n      )\n    }\n\n    /**\n     * Stick an singleton session client to APIRequest. The session\n     * client is used to keep a track of session data we have\n     * to send during the request.\n     */\n    ApiRequest.getter(\n      'sessionClient',\n      function () {\n        return new SessionClient(config.stores.memory())\n      },\n      true\n    )\n\n    /**\n     * Define session data\n     */\n    ApiRequest.macro('withSession', function (this: ApiRequest, data) {\n      this.sessionClient.merge(data)\n      return this\n    })\n\n    /**\n     * Define flash messages\n     */\n    ApiRequest.macro('withFlashMessages', function (this: ApiRequest, data) {\n      this.sessionClient.flash(data)\n      return this\n    })\n\n    /**\n     * Get session data\n     */\n    ApiResponse.macro('session', function (this: ApiResponse, key) {\n      return key ? lodash.get(this.sessionBag.values, key) : this.sessionBag.values\n    })\n\n    /**\n     * Get flash messages\n     */\n    ApiResponse.macro('flashMessages', function (this: ApiResponse) {\n      return this.sessionBag.flashMessages\n    })\n    ApiResponse.macro('flashMessage', function (this: ApiResponse, key) {\n      return lodash.get(this.sessionBag.flashMessages, key)\n    })\n\n    /**\n     * Response session assertions\n     */\n    ApiResponse.macro('assertSession', function (this: ApiResponse, key, value) {\n      this.assert!.property(this.session(), key)\n      if (value !== undefined) {\n        this.assert!.deepEqual(this.session(key), value)\n      }\n    })\n    ApiResponse.macro('assertSessionMissing', function (this: ApiResponse, key) {\n      this.assert!.notProperty(this.session(), key)\n    })\n    ApiResponse.macro('assertFlashMessage', function (this: ApiResponse, key, value) {\n      this.assert!.property(this.flashMessages(), key)\n      if (value !== undefined) {\n        this.assert!.deepEqual(this.flashMessage(key), value)\n      }\n    })\n    ApiResponse.macro('assertFlashMissing', function (this: ApiResponse, key) {\n      this.assert!.notProperty(this.flashMessages(), key)\n    })\n    ApiResponse.macro('assertHasValidationError', function (this: ApiResponse, field) {\n      this.assert!.property(this.flashMessage('errors'), field)\n    })\n    ApiResponse.macro('assertDoesNotHaveValidationError', function (this: ApiResponse, field) {\n      this.assert!.notProperty(this.flashMessage('errors'), field)\n    })\n    ApiResponse.macro('assertValidationError', function (this: ApiResponse, field, message) {\n      this.assert!.include(this.flashMessage('errors')?.[field] || [], message)\n    })\n    ApiResponse.macro('assertValidationErrors', function (this: ApiResponse, field, messages) {\n      this.assert!.deepEqual(this.flashMessage('errors')?.[field] || [], messages)\n    })\n\n    /**\n     * We define the hook using the \"request.setup\" method because we\n     * want to allow other Japa hooks to mutate the session store\n     * without running into race conditions\n     */\n    ApiClient.onRequest((request) => {\n      request.setup(async () => {\n        /**\n         * Set cookie\n         */\n        request.withCookie(config.cookieName, request.sessionClient.sessionId)\n\n        /**\n         * Persist data\n         */\n        await request.sessionClient.commit()\n\n        /**\n         * Cleanup if request fails\n         */\n        return async (error: any) => {\n          if (error) {\n            await request.sessionClient.destroy()\n          }\n        }\n      })\n\n      request.teardown(async (response) => {\n        const sessionId = response.cookie(config.cookieName)\n\n        /**\n         * Reading session data from the response cookie\n         */\n        response.sessionBag = sessionId\n          ? await response.request.sessionClient.load(sessionId.value)\n          : {\n              values: {},\n              flashMessages: {},\n            }\n\n        /**\n         * Cleanup state\n         */\n        await request.sessionClient.destroy(sessionId?.value)\n      })\n    })\n  }\n\n  return pluginFn\n}\n"],"mappings":"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","names":[]}