{"version":3,"sources":["../src/values_store.ts"],"sourcesContent":["/*\n * @adonisjs/redis\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport lodash from '@poppinss/utils/lodash'\nimport { RuntimeException } from '@poppinss/utils'\nimport type { AllowedSessionValues, SessionData } from './types.js'\n\n/**\n * Readonly session store\n */\nexport class ReadOnlyValuesStore {\n  /**\n   * Underlying store values\n   */\n  protected values: SessionData\n\n  /**\n   * Find if store is empty or not\n   */\n  get isEmpty() {\n    return !this.values || Object.keys(this.values).length === 0\n  }\n\n  constructor(values: SessionData | null) {\n    this.values = values || {}\n  }\n\n  /**\n   * Get value for a given key\n   */\n  get(key: string | string[], defaultValue?: any): any {\n    const value = lodash.get(this.values, key)\n    if (defaultValue !== undefined && (value === null || value === undefined)) {\n      return defaultValue\n    }\n\n    return value\n  }\n\n  /**\n   * A boolean to know if value exists. Extra guards to check\n   * arrays for it's length as well.\n   */\n  has(key: string | string[], checkForArraysLength: boolean = true): boolean {\n    const value = this.get(key)\n    if (!Array.isArray(value)) {\n      return !!value\n    }\n\n    return checkForArraysLength ? value.length > 0 : !!value\n  }\n\n  /**\n   * Get all values\n   */\n  all(): any {\n    return this.values\n  }\n\n  /**\n   * Returns object representation of values\n   */\n  toObject() {\n    return this.all()\n  }\n\n  /**\n   * Returns the store values\n   */\n  toJSON(): any {\n    return this.all()\n  }\n\n  /**\n   * Returns string representation of the store\n   */\n  toString() {\n    return JSON.stringify(this.all())\n  }\n}\n\n/**\n * Session store encapsulates the session data and offers a\n * declarative API to mutate it.\n */\nexport class ValuesStore extends ReadOnlyValuesStore {\n  /**\n   * A boolean to know if store has been\n   * modified\n   */\n  #modified: boolean = false\n\n  constructor(values: SessionData | null) {\n    super(values)\n  }\n\n  /**\n   * Find if the store has been modified.\n   */\n  get hasBeenModified(): boolean {\n    return this.#modified\n  }\n\n  /**\n   * Set key/value pair\n   */\n  set(key: string | string[], value: AllowedSessionValues): void {\n    this.#modified = true\n    lodash.set(this.values, key, value)\n  }\n\n  /**\n   * Remove key\n   */\n  unset(key: string | string[]): void {\n    this.#modified = true\n    lodash.unset(this.values, key)\n  }\n\n  /**\n   * Pull value from the store. It is same as calling\n   * store.get and then store.unset\n   */\n  pull(key: string | string[], defaultValue?: any): any {\n    return ((value): any => {\n      this.unset(key)\n      return value\n    })(this.get(key, defaultValue))\n  }\n\n  /**\n   * Increment number. The method raises an error when\n   * nderlying value is not a number\n   */\n  increment(key: string | string[], steps: number = 1): void {\n    const value = this.get(key, 0)\n    if (typeof value !== 'number') {\n      throw new RuntimeException(`Cannot increment \"${key}\". Existing value is not a number`)\n    }\n\n    this.set(key, value + steps)\n  }\n\n  /**\n   * Increment number. The method raises an error when\n   * nderlying value is not a number\n   */\n  decrement(key: string | string[], steps: number = 1): void {\n    const value = this.get(key, 0)\n    if (typeof value !== 'number') {\n      throw new RuntimeException(`Cannot decrement \"${key}\". Existing value is not a number`)\n    }\n\n    this.set(key, value - steps)\n  }\n\n  /**\n   * Overwrite existing store data with new values.\n   */\n  update(values: { [key: string]: any }): void {\n    this.#modified = true\n    this.values = values\n  }\n\n  /**\n   * Update to merge values\n   */\n  merge(values: { [key: string]: any }): any {\n    this.#modified = true\n    lodash.merge(this.values, values)\n  }\n\n  /**\n   * Reset store by clearing it's values.\n   */\n  clear(): void {\n    this.update({})\n  }\n}\n"],"mappings":"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","names":[]}