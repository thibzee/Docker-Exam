import {
  debug_default
} from "./chunk-WBAYBMJJ.js";

// src/stores/redis.ts
import string from "@poppinss/utils/string";
import { MessageBuilder } from "@adonisjs/core/helpers";
var RedisStore = class {
  #connection;
  #ttlSeconds;
  constructor(connection, age) {
    this.#connection = connection;
    this.#ttlSeconds = string.seconds.parse(age);
    debug_default("initiating redis store");
  }
  /**
   * Returns file contents. A new file will be created if it's
   * missing.
   */
  async read(sessionId) {
    debug_default("redis store: reading session data %s", sessionId);
    const contents = await this.#connection.get(sessionId);
    if (!contents) {
      return null;
    }
    try {
      return new MessageBuilder().verify(contents, sessionId);
    } catch {
      return null;
    }
  }
  /**
   * Write session values to a file
   */
  async write(sessionId, values) {
    debug_default("redis store: writing session data %s, %O", sessionId, values);
    const message = new MessageBuilder().build(values, void 0, sessionId);
    await this.#connection.setex(sessionId, this.#ttlSeconds, message);
  }
  /**
   * Cleanup session file by removing it
   */
  async destroy(sessionId) {
    debug_default("redis store: destroying session data %s", sessionId);
    await this.#connection.del(sessionId);
  }
  /**
   * Updates the value expiry
   */
  async touch(sessionId) {
    debug_default("redis store: touching session data %s", sessionId);
    await this.#connection.expire(sessionId, this.#ttlSeconds);
  }
};
export {
  RedisStore
};
//# sourceMappingURL=redis-KDWIBKUQ.js.map