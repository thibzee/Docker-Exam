{"version":3,"sources":["../src/errors.ts","../src/session.ts"],"sourcesContent":["/*\n * @adonisjs/session\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { createError } from '@poppinss/utils'\n\n/**\n * Raised when session store is not mutable\n */\nexport const E_SESSION_NOT_MUTABLE = createError(\n  'Session store is in readonly mode and cannot be mutated',\n  'E_SESSION_NOT_MUTABLE',\n  500\n)\n\n/**\n * Raised when session store has been initiated\n */\nexport const E_SESSION_NOT_READY = createError(\n  'Session store has not been initiated. Make sure you have registered the session middleware',\n  'E_SESSION_NOT_READY',\n  500\n)\n","/*\n * @adonisjs/session\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { I18n } from '@adonisjs/i18n'\nimport Macroable from '@poppinss/macroable'\nimport lodash from '@poppinss/utils/lodash'\nimport { cuid } from '@adonisjs/core/helpers'\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type { EmitterService } from '@adonisjs/core/types'\nimport type { HttpError } from '@adonisjs/core/types/http'\n\nimport debug from './debug.js'\nimport * as errors from './errors.js'\nimport { ReadOnlyValuesStore, ValuesStore } from './values_store.js'\nimport type {\n  SessionData,\n  SessionConfig,\n  SessionStoreFactory,\n  AllowedSessionValues,\n  SessionStoreContract,\n} from './types.js'\n\n/**\n * The session class exposes the API to read and write values to\n * the session store.\n *\n * A session instance is isolated between requests but\n * uses a centralized persistence store and\n */\nexport class Session extends Macroable {\n  #store: SessionStoreContract\n  #emitter: EmitterService\n  #ctx: HttpContext\n  #readonly: boolean = false\n\n  /**\n   * Session values store\n   */\n  #valuesStore?: ValuesStore\n\n  /**\n   * Session id refers to the session id that will be committed\n   * as a cookie during the response.\n   */\n  #sessionId: string\n\n  /**\n   * Session id from cookie refers to the value we read from the\n   * cookie during the HTTP request.\n   *\n   * This only might not exist during the first request. Also during\n   * session id re-generation, this value will be different from\n   * the session id.\n   */\n  #sessionIdFromCookie?: string\n\n  /**\n   * Store of flash messages that be written during the\n   * HTTP request\n   */\n  responseFlashMessages = new ValuesStore({})\n\n  /**\n   * Store of flash messages for the current HTTP request.\n   */\n  flashMessages = new ValuesStore({})\n\n  /**\n   * The key to use for storing flash messages inside\n   * the session store.\n   */\n  flashKey: string = '__flash__'\n\n  /**\n   * Session id for the current HTTP request\n   */\n  get sessionId() {\n    return this.#sessionId\n  }\n\n  /**\n   * A boolean to know if a fresh session is created during\n   * the request\n   */\n  get fresh(): boolean {\n    return this.#sessionIdFromCookie === undefined\n  }\n\n  /**\n   * A boolean to know if session is in readonly\n   * state\n   */\n  get readonly() {\n    return this.#readonly\n  }\n\n  /**\n   * A boolean to know if session store has been initiated\n   */\n  get initiated() {\n    return !!this.#valuesStore\n  }\n\n  /**\n   * A boolean to know if the session id has been re-generated\n   * during the current request\n   */\n  get hasRegeneratedSession() {\n    return !!(this.#sessionIdFromCookie && this.#sessionIdFromCookie !== this.#sessionId)\n  }\n\n  /**\n   * A boolean to know if the session store is empty\n   */\n  get isEmpty() {\n    return this.#valuesStore?.isEmpty ?? true\n  }\n\n  /**\n   * A boolean to know if the session store has been\n   * modified\n   */\n  get hasBeenModified() {\n    return this.#valuesStore?.hasBeenModified ?? false\n  }\n\n  constructor(\n    public config: SessionConfig,\n    storeFactory: SessionStoreFactory,\n    emitter: EmitterService,\n    ctx: HttpContext\n  ) {\n    super()\n    this.#ctx = ctx\n    this.#emitter = emitter\n    this.#store = storeFactory(ctx, config)\n    this.#sessionIdFromCookie = ctx.request.cookie(config.cookieName, undefined)\n    this.#sessionId = this.#sessionIdFromCookie || cuid()\n  }\n\n  /**\n   * Returns the flash messages store for a given\n   * mode\n   */\n  #getFlashStore(mode: 'write' | 'read'): ValuesStore {\n    if (!this.#valuesStore) {\n      throw new errors.E_SESSION_NOT_READY()\n    }\n\n    if (mode === 'write' && this.readonly) {\n      throw new errors.E_SESSION_NOT_MUTABLE()\n    }\n\n    return this.responseFlashMessages\n  }\n\n  /**\n   * Returns the store instance for a given mode\n   */\n  #getValuesStore(mode: 'write' | 'read'): ValuesStore {\n    if (!this.#valuesStore) {\n      throw new errors.E_SESSION_NOT_READY()\n    }\n\n    if (mode === 'write' && this.readonly) {\n      throw new errors.E_SESSION_NOT_MUTABLE()\n    }\n\n    return this.#valuesStore\n  }\n\n  /**\n   * Initiates the session store. The method results in a noop\n   * when called multiple times\n   */\n  async initiate(readonly: boolean): Promise<void> {\n    if (this.#valuesStore) {\n      return\n    }\n\n    debug('initiating session (readonly: %s)', readonly)\n\n    this.#readonly = readonly\n    const contents = await this.#store.read(this.#sessionId)\n    this.#valuesStore = new ValuesStore(contents)\n\n    /**\n     * Extract flash messages from the store and keep a local\n     * copy of it.\n     */\n    if (this.has(this.flashKey)) {\n      debug('reading flash data')\n      if (this.#readonly) {\n        this.flashMessages.update(this.get(this.flashKey, null))\n      } else {\n        this.flashMessages.update(this.pull(this.flashKey, null))\n      }\n    }\n\n    /**\n     * Share session with the templates. We assume the view property\n     * is a reference to edge templates\n     */\n    if ('view' in this.#ctx) {\n      this.#ctx.view.share({\n        session: new ReadOnlyValuesStore(this.#valuesStore.all()),\n        flashMessages: new ReadOnlyValuesStore(this.flashMessages.all()),\n        old: function (key: string, defaultValue?: any) {\n          return this.flashMessages.get(key, defaultValue)\n        },\n      })\n    }\n\n    this.#emitter.emit('session:initiated', { session: this })\n  }\n\n  /**\n   * Put a key-value pair to the session data store\n   */\n  put(key: string, value: AllowedSessionValues) {\n    this.#getValuesStore('write').set(key, value)\n  }\n\n  /**\n   * Check if a key exists inside the datastore\n   */\n  has(key: string): boolean {\n    return this.#getValuesStore('read').has(key)\n  }\n\n  /**\n   * Get the value of a key from the session datastore.\n   * You can specify a default value to use, when key\n   * does not exists or has undefined value.\n   */\n  get(key: string, defaultValue?: any) {\n    return this.#getValuesStore('read').get(key, defaultValue)\n  }\n\n  /**\n   * Get everything from the session store\n   */\n  all() {\n    return this.#getValuesStore('read').all()\n  }\n\n  /**\n   * Remove a key from the session datastore\n   */\n  forget(key: string) {\n    return this.#getValuesStore('write').unset(key)\n  }\n\n  /**\n   * Read value for a key from the session datastore\n   * and remove it simultaneously.\n   */\n  pull(key: string, defaultValue?: any) {\n    return this.#getValuesStore('write').pull(key, defaultValue)\n  }\n\n  /**\n   * Increment the value of a key inside the session\n   * store.\n   *\n   * A new key will be defined if does not exists already.\n   * The value of a new key will be 1\n   */\n  increment(key: string, steps: number = 1) {\n    return this.#getValuesStore('write').increment(key, steps)\n  }\n\n  /**\n   * Increment the value of a key inside the session\n   * store.\n   *\n   * A new key will be defined if does not exists already.\n   * The value of a new key will be -1\n   */\n  decrement(key: string, steps: number = 1) {\n    return this.#getValuesStore('write').decrement(key, steps)\n  }\n\n  /**\n   * Empty the session store\n   */\n  clear() {\n    return this.#getValuesStore('write').clear()\n  }\n\n  /**\n   * Add a key-value pair to flash messages\n   */\n  flash(key: string, value: AllowedSessionValues): void\n  flash(keyValue: SessionData): void\n  flash(key: string | SessionData, value?: AllowedSessionValues): void {\n    if (typeof key === 'string') {\n      if (value) {\n        this.#getFlashStore('write').set(key, value)\n      }\n    } else {\n      this.#getFlashStore('write').merge(key)\n    }\n  }\n\n  /**\n   * Flash errors to the errorsBag. You can read these\n   * errors via the \"@error\" tag.\n   *\n   * Appends new messages to the existing collection.\n   */\n  flashErrors(errorsCollection: Record<string, string | string[]>) {\n    this.flash({ errorsBag: errorsCollection })\n  }\n\n  /**\n   * Flash validation error messages. Make sure the error\n   * is an instance of VineJS ValidationException.\n   *\n   * Overrides existing inputErrors\n   */\n  flashValidationErrors(error: HttpError) {\n    const errorsBag = error.messages.reduce((result: Record<string, string[]>, message: any) => {\n      if (result[message.field]) {\n        result[message.field].push(message.message)\n      } else {\n        result[message.field] = [message.message]\n      }\n      return result\n    }, {})\n\n    this.flashExcept(['_csrf', '_method', 'password', 'password_confirmation'])\n\n    /**\n     * Adding the error summary to the \"errorsBag\" so that\n     * we display the validation error globally using\n     * the \"@error\" tag.\n     */\n    let summary = 'The form could not be saved. Please check the errors below.'\n    if ('i18n' in this.#ctx) {\n      summary = (this.#ctx.i18n as I18n).t(\n        `errors.${error.code}`,\n        {\n          count: error.messages.length,\n        },\n        summary\n      )\n    }\n\n    this.flashErrors({\n      [String(error.code)]: summary,\n    })\n\n    /**\n     * Adding to inputErrorsBag for \"@inputError\" tag\n     * to read validation errors\n     */\n    this.flash('inputErrorsBag', errorsBag)\n\n    /**\n     * For legacy support and not to break apps using\n     * the older version of @adonisjs/session package\n     */\n    this.flash('errors', errorsBag)\n  }\n\n  /**\n   * Flash form input data to the flash messages store\n   */\n  flashAll() {\n    return this.#getFlashStore('write').set('input', this.#ctx.request.original())\n  }\n\n  /**\n   * Flash form input data (except some keys) to the flash messages store\n   */\n  flashExcept(keys: string[]): void {\n    this.#getFlashStore('write').set('input', lodash.omit(this.#ctx.request.original(), keys))\n  }\n\n  /**\n   * Flash form input data (only some keys) to the flash messages store\n   */\n  flashOnly(keys: string[]): void {\n    this.#getFlashStore('write').set('input', lodash.pick(this.#ctx.request.original(), keys))\n  }\n\n  /**\n   * Reflash messages from the last request in the current response\n   */\n  reflash(): void {\n    this.#getFlashStore('write').set('reflashed', this.flashMessages.all())\n  }\n\n  /**\n   * Reflash messages (only some keys) from the last\n   * request in the current response\n   */\n  reflashOnly(keys: string[]) {\n    this.#getFlashStore('write').set('reflashed', lodash.pick(this.flashMessages.all(), keys))\n  }\n\n  /**\n   * Reflash messages (except some keys) from the last\n   * request in the current response\n   */\n  reflashExcept(keys: string[]) {\n    this.#getFlashStore('write').set('reflashed', lodash.omit(this.flashMessages.all(), keys))\n  }\n\n  /**\n   * Re-generate the session id and migrate data to it.\n   */\n  regenerate() {\n    this.#sessionId = cuid()\n  }\n\n  /**\n   * Commit session changes. No more mutations will be\n   * allowed after commit.\n   */\n  async commit() {\n    if (!this.#valuesStore || this.readonly) {\n      return\n    }\n\n    /**\n     * If the flash messages store is not empty, we should put\n     * its messages inside main session store.\n     */\n    if (!this.responseFlashMessages.isEmpty) {\n      const { input, reflashed, ...others } = this.responseFlashMessages.all()\n      this.put(this.flashKey, { ...reflashed, ...input, ...others })\n    }\n\n    debug('committing session data')\n\n    /**\n     * Touch the session id cookie to stay alive\n     */\n    this.#ctx.response.cookie(this.config.cookieName, this.#sessionId, this.config.cookie!)\n\n    /**\n     * Delete the session data when the session store\n     * is empty.\n     *\n     * Also we only destroy the session id we read from the cookie.\n     * If there was no session id in the cookie, there won't be\n     * any data inside the store either.\n     */\n    if (this.isEmpty) {\n      if (this.#sessionIdFromCookie) {\n        await this.#store.destroy(this.#sessionIdFromCookie)\n      }\n      this.#emitter.emit('session:committed', { session: this })\n      return\n    }\n\n    /**\n     * Touch the store expiry when the session store was\n     * not modified.\n     */\n    if (!this.hasBeenModified) {\n      if (this.#sessionIdFromCookie && this.#sessionIdFromCookie !== this.#sessionId) {\n        await this.#store.destroy(this.#sessionIdFromCookie)\n        await this.#store.write(this.#sessionId, this.#valuesStore.toJSON())\n        this.#emitter.emit('session:migrated', {\n          fromSessionId: this.#sessionIdFromCookie,\n          toSessionId: this.sessionId,\n          session: this,\n        })\n      } else {\n        await this.#store.touch(this.#sessionId)\n      }\n      this.#emitter.emit('session:committed', { session: this })\n      return\n    }\n\n    /**\n     * Otherwise commit to the session store\n     */\n    if (this.#sessionIdFromCookie && this.#sessionIdFromCookie !== this.#sessionId) {\n      await this.#store.destroy(this.#sessionIdFromCookie)\n      await this.#store.write(this.#sessionId, this.#valuesStore.toJSON())\n      this.#emitter.emit('session:migrated', {\n        fromSessionId: this.#sessionIdFromCookie,\n        toSessionId: this.sessionId,\n        session: this,\n      })\n    } else {\n      await this.#store.write(this.#sessionId, this.#valuesStore.toJSON())\n    }\n\n    this.#emitter.emit('session:committed', { session: this })\n  }\n}\n"],"mappings":"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","names":[]}