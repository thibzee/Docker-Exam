{"version":3,"sources":["../src/session_middleware.ts"],"sourcesContent":["/*\n * @adonisjs/session\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { EmitterService } from '@adonisjs/core/types'\nimport type { NextFn } from '@adonisjs/core/types/http'\nimport { ExceptionHandler, HttpContext } from '@adonisjs/core/http'\n\nimport { Session } from './session.js'\nimport type { SessionConfig, SessionStoreFactory } from './types.js'\n\n/**\n * HttpContext augmentations\n */\ndeclare module '@adonisjs/core/http' {\n  export interface HttpContext {\n    session: Session\n  }\n}\n\n/**\n * Overwriting validation exception renderer\n */\nconst originalErrorHandler = ExceptionHandler.prototype.renderValidationErrorAsHTML\nExceptionHandler.macro('renderValidationErrorAsHTML', async function (error, ctx) {\n  if (ctx.session) {\n    ctx.session.flashValidationErrors(error)\n    ctx.response.redirect('back', true)\n  } else {\n    return originalErrorHandler(error, ctx)\n  }\n})\n\n/**\n * Session middleware is used to initiate the session store\n * and commit its values during an HTTP request\n */\nexport default class SessionMiddleware<KnownStores extends Record<string, SessionStoreFactory>> {\n  #config: SessionConfig & {\n    store: keyof KnownStores\n    stores: KnownStores\n  }\n  #emitter: EmitterService\n\n  constructor(\n    config: SessionConfig & {\n      store: keyof KnownStores\n      stores: KnownStores\n    },\n    emitter: EmitterService\n  ) {\n    this.#config = config\n    this.#emitter = emitter\n  }\n\n  async handle(ctx: HttpContext, next: NextFn) {\n    if (!this.#config.enabled) {\n      return next()\n    }\n\n    ctx.session = new Session(\n      this.#config,\n      this.#config.stores[this.#config.store], // reference to store factory\n      this.#emitter,\n      ctx\n    )\n\n    /**\n     * Initiate session store\n     */\n    await ctx.session.initiate(false)\n\n    /**\n     * Call next middlewares or route handler\n     */\n    const response = await next()\n\n    /**\n     * Commit store mutations\n     */\n    await ctx.session.commit()\n\n    /**\n     * Return response\n     */\n    return response\n  }\n}\n"],"mappings":";;;;;AAWA,SAAS,wBAAqC;AAiB9C,IAAM,uBAAuB,iBAAiB,UAAU;AACxD,iBAAiB,MAAM,+BAA+B,eAAgB,OAAO,KAAK;AAChF,MAAI,IAAI,SAAS;AACf,QAAI,QAAQ,sBAAsB,KAAK;AACvC,QAAI,SAAS,SAAS,QAAQ,IAAI;AAAA,EACpC,OAAO;AACL,WAAO,qBAAqB,OAAO,GAAG;AAAA,EACxC;AACF,CAAC;AAMD,IAAqB,oBAArB,MAAgG;AAAA,EAC9F;AAAA,EAIA;AAAA,EAEA,YACE,QAIA,SACA;AACA,SAAK,UAAU;AACf,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,MAAM,OAAO,KAAkB,MAAc;AAC3C,QAAI,CAAC,KAAK,QAAQ,SAAS;AACzB,aAAO,KAAK;AAAA,IACd;AAEA,QAAI,UAAU,IAAI;AAAA,MAChB,KAAK;AAAA,MACL,KAAK,QAAQ,OAAO,KAAK,QAAQ,KAAK;AAAA;AAAA,MACtC,KAAK;AAAA,MACL;AAAA,IACF;AAKA,UAAM,IAAI,QAAQ,SAAS,KAAK;AAKhC,UAAM,WAAW,MAAM,KAAK;AAK5B,UAAM,IAAI,QAAQ,OAAO;AAKzB,WAAO;AAAA,EACT;AACF;","names":[]}