{"version":3,"sources":["../src/client.ts"],"sourcesContent":["/*\n * @adonisjs/session\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { cuid } from '@adonisjs/core/helpers'\n\nimport debug from './debug.js'\nimport { ValuesStore } from './values_store.js'\nimport type { SessionData, SessionStoreContract } from './types.js'\n\n/**\n * Session client exposes the API to set session data as a client\n */\nexport class SessionClient {\n  /**\n   * Data store\n   */\n  #valuesStore = new ValuesStore({})\n\n  /**\n   * Flash messages store\n   */\n  #flashMessagesStore = new ValuesStore({})\n\n  /**\n   * The session store to use for reading and writing session data\n   */\n  #store: SessionStoreContract\n\n  /**\n   * Session key for setting flash messages\n   */\n  flashKey = '__flash__'\n\n  /**\n   * Session to use when no explicit session id is\n   * defined\n   */\n  sessionId = cuid()\n\n  constructor(store: SessionStoreContract) {\n    this.#store = store\n  }\n\n  /**\n   * Merge session data\n   */\n  merge(values: SessionData) {\n    this.#valuesStore.merge(values)\n    return this\n  }\n\n  /**\n   * Merge flash messages\n   */\n  flash(values: SessionData) {\n    this.#flashMessagesStore.merge(values)\n    return this\n  }\n\n  /**\n   * Commits data to the session store.\n   */\n  async commit() {\n    if (!this.#flashMessagesStore.isEmpty) {\n      this.#valuesStore.set(this.flashKey, this.#flashMessagesStore.toJSON())\n    }\n\n    debug('committing session data during api request')\n    if (!this.#valuesStore.isEmpty) {\n      this.#store.write(this.sessionId, this.#valuesStore.toJSON())\n    }\n  }\n\n  /**\n   * Destroys the session data with the store\n   */\n  async destroy(sessionId?: string) {\n    debug('destroying session data during api request')\n    this.#store.destroy(sessionId || this.sessionId)\n  }\n\n  /**\n   * Loads session data from the session store\n   */\n  async load(sessionId?: string) {\n    const contents = await this.#store.read(sessionId || this.sessionId)\n    const store = new ValuesStore(contents)\n    const flashMessages = store.pull(this.flashKey, {})\n\n    return {\n      values: store.all(),\n      flashMessages,\n    }\n  }\n}\n"],"mappings":";;;;;;;;AASA,SAAS,YAAY;AASd,IAAM,gBAAN,MAAoB;AAAA;AAAA;AAAA;AAAA,EAIzB,eAAe,IAAI,YAAY,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,EAKjC,sBAAsB,IAAI,YAAY,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,EAKxC;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAMX,YAAY,KAAK;AAAA,EAEjB,YAAY,OAA6B;AACvC,SAAK,SAAS;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,QAAqB;AACzB,SAAK,aAAa,MAAM,MAAM;AAC9B,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,QAAqB;AACzB,SAAK,oBAAoB,MAAM,MAAM;AACrC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS;AACb,QAAI,CAAC,KAAK,oBAAoB,SAAS;AACrC,WAAK,aAAa,IAAI,KAAK,UAAU,KAAK,oBAAoB,OAAO,CAAC;AAAA,IACxE;AAEA,kBAAM,4CAA4C;AAClD,QAAI,CAAC,KAAK,aAAa,SAAS;AAC9B,WAAK,OAAO,MAAM,KAAK,WAAW,KAAK,aAAa,OAAO,CAAC;AAAA,IAC9D;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,QAAQ,WAAoB;AAChC,kBAAM,4CAA4C;AAClD,SAAK,OAAO,QAAQ,aAAa,KAAK,SAAS;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,KAAK,WAAoB;AAC7B,UAAM,WAAW,MAAM,KAAK,OAAO,KAAK,aAAa,KAAK,SAAS;AACnE,UAAM,QAAQ,IAAI,YAAY,QAAQ;AACtC,UAAM,gBAAgB,MAAM,KAAK,KAAK,UAAU,CAAC,CAAC;AAElD,WAAO;AAAA,MACL,QAAQ,MAAM,IAAI;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AACF;","names":[]}